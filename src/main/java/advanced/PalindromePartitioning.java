package advanced;

import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;

/**
 * Find all palindromic partitions of a string.
 * Palindrome partition: Every partition is palindrome and all partitions together form the input.
 *
 * aab -> {a, a, b}, {aa, b}
 * 
 * Use backTrackingAndRecursion:
 *  check if there is a palindrome substring
 *  for each such substring check if there are further palindromic substrings
 *  add it to a deque
 *  if all chars explored, add all contents of deque to master list
 *  remove from deque
 */
public class PalindromePartitioning {
    public static void main(String[] args) {
        allPalPartitions("aab");
    }

    private static void allPalPartitions(String input) {
        int n = input.length();

        // To Store all palindromic partitions
        List<List<String>> allPart = new ArrayList<>();

        // To store current palindromic partition
        Deque<String> currPart = new LinkedList<>();

        // Call recursive function to generate
        // all partiions and store in allPart
        allPalPartitions(allPart, currPart, 0, n, input);

        // Print all partitions generated by above call
        print(allPart);

    }

    private static void allPalPartitions(List<List<String>> allPart,
                                         Deque<String> currPart, int start, int n, String input) {
        // If 'start' has reached len
        if (start >= n) {
            allPart.add(new ArrayList<>(currPart));
            return;
        }

        // Pick all possible ending points for substrings
        for (int i = start; i < n; i++) {

            // If substring str[start..i] is palindrome
            if (isPalindrome(input, start, i)) {

                // Add the substring to result
                String s = input.substring(start, i + 1);
                currPart.addLast(s);

                // Recur for remaining remaining substring
                allPalPartitions(allPart, currPart, i + 1, n, input);

                // Remove substring str[start..i] from current partition
                currPart.removeLast();
            }
        }
    }

    private static boolean isPalindrome(String input,
                                        int start, int i) {
        while (start < i) {
            if (input.charAt(start++) != input.charAt(i--))
                return false;
        }
        return true;
    }

    private static void print(List<List<String>> allPart) {
        for (int i = 0; i < allPart.size(); i++) {
            for (int j = 0; j < allPart.get(i).size(); j++) {
                System.out.print("\t" + allPart.get(i).get(j) + " ");
            }
        }
    }
}
